(window.webpackJsonp=window.webpackJsonp||[]).push([[40],{495:function(t,s,a){"use strict";a.r(s);var v=a(2),_=Object(v.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h3",{attrs:{id:"js的运行环境"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js的运行环境"}},[t._v("#")]),t._v(" js的运行环境")]),t._v(" "),a("p",[t._v("js的运行不是像C++，java等编译语言编译后直接在操作系统上运行，因为它是脚本语言，运行时必须要借助引擎来运行，所以它可以在封装了引擎的环境下运行。而当js运行时，它会有不同的运行环境。")]),t._v(" "),a("ul",[a("li",[t._v("Global Code -- js代码开始的默认运行环境")]),t._v(" "),a("li",[t._v("Function Code -- 代码执行在js函数中")]),t._v(" "),a("li",[t._v("Eval Code -- 使用eval()执行代码")])]),t._v(" "),a("h3",{attrs:{id:"js的运行过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#js的运行过程"}},[t._v("#")]),t._v(" js的运行过程")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("js的执行过程，可以分为两个重要的时期：预编译期（预解析期）和执行期")])]),t._v(" "),a("li",[a("p",[t._v("预编译期")]),t._v(" "),a("ul",[a("li",[t._v("浏览器的js引擎解析js代码")]),t._v(" "),a("li",[t._v("建立argumnets对象，函数，参数，变量")]),t._v(" "),a("li",[t._v("建立作用域链")]),t._v(" "),a("li",[t._v("确定this的指向")])])]),t._v(" "),a("li",[a("p",[t._v("执行期")]),t._v(" "),a("ul",[a("li",[t._v("按照从上到下的顺序执行代码")])])])]),t._v(" "),a("h3",{attrs:{id:"执行上下文"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#执行上下文"}},[t._v("#")]),t._v(" 执行上下文")]),t._v(" "),a("h4",{attrs:{id:"概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[t._v("#")]),t._v(" 概念")]),t._v(" "),a("p",[t._v("如何区分不同运行环境，需要引出一个概念，就是执行上下文，它是一个对象，由js的执行引擎创建，具有三个属性：变量对象，作用域链，this指针。")]),t._v(" "),a("h4",{attrs:{id:"上下文栈"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#上下文栈"}},[t._v("#")]),t._v(" 上下文栈")]),t._v(" "),a("p",[t._v("js在执行过程中会有一个上下文栈，上下文栈中存放的是不同的上下文对象（可以理解为不同的js运行环境），比如当js开始执行一个函数，那此时它的运行环境从原来的Global Code变为Function Code\njs引擎会创建一个context对象，并将其压入栈中，当这个函数执行完之后，这个对象将会弹出。"),a("br"),t._v("\n故而，当前的执行代码的context对象总是出现在栈顶。")])])}),[],!1,null,null,null);s.default=_.exports}}]);