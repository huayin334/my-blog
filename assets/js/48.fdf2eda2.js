(window.webpackJsonp=window.webpackJsonp||[]).push([[48],{503:function(t,a,s){"use strict";s.r(a);var e=s(2),n=Object(e.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h3",{attrs:{id:"概念"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#概念"}},[t._v("#")]),t._v(" 概念")]),t._v(" "),s("p",[t._v("Redux 是一个小型的独立 JS 库。Redux是一个使用叫做‘action’的事件来管理和更新应用状态的模式和工具库，它以集中存储（centralized store）的方式对整个应用中使用的状态进行集中管理，其规则确保状态只能以可预测的方式更新。  -----管理全局状态")]),t._v(" "),s("h4",{attrs:{id:"什么时候使用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#什么时候使用"}},[t._v("#")]),t._v(" 什么时候使用")]),t._v(" "),s("ul",[s("li",[t._v("在应用的大量地方，都存在大量的状态")]),t._v(" "),s("li",[t._v("应用状态会随着时间的推移而频繁更新")]),t._v(" "),s("li",[t._v("更新该状态的逻辑可能很复杂")]),t._v(" "),s("li",[t._v("中型和大型代码量的应用，很多人协同开发")])]),t._v(" "),s("h4",{attrs:{id:"单向数据流（one-way-data-flow）"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#单向数据流（one-way-data-flow）"}},[t._v("#")]),t._v(" 单向数据流（one-way data flow）")]),t._v(" "),s("ul",[s("li",[s("p",[t._v("state---\x3eview----\x3eactions----\x3estate")])]),t._v(" "),s("li",[s("p",[t._v("用state来描述应用程序在特定时间点的状况")])]),t._v(" "),s("li",[s("p",[t._v("基于state渲染出view")])]),t._v(" "),s("li",[s("p",[t._v("当触发一些事件（如点击按钮）,state会根据发生的事情来更新state")])]),t._v(" "),s("li",[s("p",[t._v("新的state重新渲染出view")])])]),t._v(" "),s("h4",{attrs:{id:"基本思想"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#基本思想"}},[t._v("#")]),t._v(" 基本思想")]),t._v(" "),s("p",[t._v("应用中使用集中式的全局状态来管理，并明确更新状态的模式，以便让代码具有可预测性。")]),t._v(" "),s("h3",{attrs:{id:"一些术语"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#一些术语"}},[t._v("#")]),t._v(" 一些术语")]),t._v(" "),s("h4",{attrs:{id:"action"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#action"}},[t._v("#")]),t._v(" Action")]),t._v(" "),s("p",[t._v("一个有type字段的对象")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" addAction "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  type"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'add/todo'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  payload"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'do something'")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br")])]),s("p",[t._v("type: 域/事件名称")]),t._v(" "),s("ul",[s("li",[t._v("域：action所属的特征或类型")]),t._v(" "),s("li",[t._v("事件名称：发生的具体事情")])]),t._v(" "),s("p",[t._v("而action对象可以有其他字段，通常把附加信息放在payload字段里")]),t._v(" "),s("h4",{attrs:{id:"action-creator"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#action-creator"}},[t._v("#")]),t._v(" Action Creator")]),t._v(" "),s("p",[t._v("是一个创建并返回action对象的函数，作用：不用每次都动手写action对象")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("text")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  type"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v("'add/todo'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  payload"),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v("text\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br"),s("span",{staticClass:"line-number"},[t._v("2")]),s("br"),s("span",{staticClass:"line-number"},[t._v("3")]),s("br"),s("span",{staticClass:"line-number"},[t._v("4")]),s("br"),s("span",{staticClass:"line-number"},[t._v("5")]),s("br"),s("span",{staticClass:"line-number"},[t._v("6")]),s("br")])]),s("h4",{attrs:{id:"reducer"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#reducer"}},[t._v("#")]),t._v(" Reducer")]),t._v(" "),s("p",[t._v("一个函数，接收当前的state和一个action对象，决定如何更新状态，并返回新状态。")]),t._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("state"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" action")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" newState\n")])]),t._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[t._v("1")]),s("br")])]),s("p",[t._v("规则：")]),t._v(" "),s("ul",[s("li",[t._v("仅使用 state 和 action 参数计算新的状态值")]),t._v(" "),s("li",[t._v("禁止直接修改 state。必须通过复制现有的 state 并对复制的值进行更改的方式来做 不可变更新（immutable updates）。---\x3e深拷贝")]),t._v(" "),s("li",[t._v("禁止任何异步逻辑、依赖随机值或导致其他“副作用”的代码")])]),t._v(" "),s("p",[t._v("reducer 函数内部的逻辑通常遵循以下步骤：")]),t._v(" "),s("p",[t._v("检查 reducer 是否关心这个 action\n如果是，则复制 state，使用新值更新 state 副本，然后返回新 state\n否则，返回原来的 state 不变")]),t._v(" "),s("p",[t._v("看到这里感觉和react里的useReducer一样。")])])}),[],!1,null,null,null);a.default=n.exports}}]);